


ui = data + style + behavior


web ui
-------

 data   ==> HTML elements
 style  ==> CSS
 behavior ==> javascript  ( ES6 )

 ----------------------------------------------------
 
what javascript language can do on HTML-page 
in browser envi?

using w3c standard web APIs, 
javascript programs can do any dynamic actions on web-page
within browser-envi

w3c standard web APIs ==> DOM, XHR, Timer, ...

imp-note:
   all w3c standard APIs are implemented 
   by browser vendors nativly,
   and abstracted to us as javascript objects & functions 

using DOM API
--------------
=> for page manipulation 
 -> can create,retreive,update,delete HTML elements
 -> can change element's inner text/html content 
 -> can change element's attributes/properties
 -> can change element's styles ( css )
 -> can validate form-fields before submit to server-program

using XHR / Fetch
-------------------
=> for Async communication with server-side programs

using Timer API
----------------
=> to execute some action(s) on timeout/interval


https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5




limitations of plain-javascript ( your code) 
with browser APIs
-----------------------------------------------------------


=>  browser compatability issues
    - https://caniuse.com/
=> memory management issues
=> performance issues
=> code organization is bad
=> too much code


legacy soln:
--------------

    => using server-side dynamic web pages

        e.g jsp, asp.net , php ...


 limitations on server-side page technologies:
 ---------------------------------------------

     =>  on every request, 
         server-side programs must re-construct new-page,
         with client prev state  

     => on every request,
        server always transfer same static resources with page,
        will increase n/w b/w

     => on every new page,
        browser reloads existing page.  


modern solution:

      => using client-side page/ui technologies 

      How ?

      => new browser apis are introduced ( i.e HTML5 APIs)
      => using advanced javascript syntax & apis

      +

      => using third-party's javascript lib & frameworks



javascript utility lib
-----------------------

   1. jQuery

      => DOM & XHR utility lib  

       limitations on jquery

            --> design & performance issues

   
   mvc based lib & F.W
   --------------------------

   1. backbone.js
   2. knockout.js
   3. ember.js
   4. angular.js  ( popular )
   ....         



   limitation with MVC on UI-application

   ==> un-predictable data flow b/w Model & View,
       due to 2-way data-binding

   ==> can't build re-usable UI fragments/components     



   soln:

   ==>  component based arch

   how to development UI components ?


      way-1 : using w3c standard apis 
      --------------------------------

         => HTML template
         => shadow DOM
         => custom elements


      way-2 : using third party's js lib & F.Ws
      ------------------------------------------

         a. react.js from facebook  : v17 
         b. angular                 : v8  ( our focus )
         c. Vue
         d. polymer.js
         e. Ember.js
         ...

      -------------------------------------------   





component arch in UI
--------------------


 in web-UI ,

      what is component ?
      -------------------

        Independent UI-fragement with single-responsibility

        e.g

        Box, Searchbar, Navbar, Login , Product, ...



        component's principles
        ----------------------

        =>  must have single-responsibility
        =>  must be loosly coupled from other components
        =>  can customizable via input properties/attributes
            i.e parent-component can  customize child-component via props
        =>  cannot change given input props
        =>  can hold state/data if required ( statefull components)
        =>  must re-render on state change / new props 
        =>  data flow b/w components must be in uni-directional

            i.e parent  --> child   via props/attributes
                child   --> parent  via events


          ---------------------------------------------------



        is HTML element(s) follows component based arch ?  Yes


        ==> HTML tag/element/component

                i.e dom-element is individual component

        ==> every html-tag/element/component
            is an instance of HTMLXXXElement class

         e.g
            <div></div>  instanceof 'HTMLDivElement' class

            i.e

            HTMLDivElement      ==> HTML-component-class
            <div></div>         ==> HTML-component-instance

            HTMLInputElement    ==> HTML-component-class
            <input/>            ==> HTML-component-instance



        -------------------------------------
        html-component properties/attributes
        -------------------------------------


        div component

                - id
                - class
                - innerHTML

        input component

                - id 
                - class
                - type 

        ......           




        -------------------------------------
        types of html-components
        -------------------------------------


        1. stateless components   e.g   <div>, <hr/>
        2. statefull components   e.g   <input /> , <canvas> , <audio /> ...

        imp-note :
        
          ==> when component's state changes, 
              always will re-render



                
        -------------------------------------------------

        in component based arch  
                ==> uni-directional data-flow

        parent --> child : data/props will go down
        child  --> parent : action/event will come up

        -------------------------------------------------

        sometimes we need higher level UI components  ( web components )

        e.g  Dialog,Datatable,Chart,.....


        2 ways

        way-1 : using w3c web component spec apis

                - custome elements Api
                - shadow dom Api
                - Template Api

        way-2 : using third party's lib and F.ws

                - Angular
                - React
                ...

        -------------------------------------------------------                





